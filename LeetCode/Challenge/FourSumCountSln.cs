using System;
using System.Collections.Generic;
using System.Text;

namespace LeetCode.Challenge
{
    class FourSumCountSln : ISolution
    {
        public int FourSumCount(int[] A, int[] B, int[] C, int[] D)
        {
            if (A.Length == 0)
            {
                return 0;
            }

            int len = A.Length;

            int count = 0;
            Dictionary<int, int> leftPart = new Dictionary<int, int>();

            int sum = 0;
            for (int i = 0; i < len; i++)
            {
                sum += A[i];
                for (int j = 0; j < len; j++)
                {
                    sum += B[j];
                    leftPart[sum] = leftPart.ContainsKey(sum) ? leftPart[sum] + 1 : 1;
                    sum -= B[j];
                }
                sum -= A[i];
            }

            for (int i = 0; i < len; i++)
            {
                sum += C[i];
                for (int j = 0; j < len; j++)
                {
                    sum += D[j];
                    if (leftPart.ContainsKey(0 - sum))
                    {
                        count += leftPart[0 - sum];
                    }
                    sum -= D[j];
                }
                sum -= C[i];
            }

         
            return count;
        }



        public void Execute()
        {
            FourSumCount(new int[] { -32, 6, -17, -4, 3, -10, -6, 5, -13, -25, -9, -4, -13, 0, 4, -7, -31, -4, -17, -5, -15, 8, -15, 8, 9, -4, -24, -29, -31, -6, 1, -6, -30, -26, -30, 8, -7, -26, 8, -27, -26, -27, 5, -32, 8, 0, -30, -4, -2, 5, 2, -32, -25, -2, 8, -16, -17, 10, -21, -7, -26, -12, -2, -1, -19, 10, 6, -8, 3, -29, 5, -28, -32, 5, -1, 10, 10, -29, -6, -12, 9, -10, -17, 6, -10, -20, -2, -11, -10, -29, 2, -4, -4, -19, -26, -25, -4, 8, -1, -29 },
                new int[] { -27, -5, -27, -17, -6, -2, -9, 8, -30, -29, 9, -4, -22, 0, -16, -5, -6, -8, 3, -18, -30, -16, -29, -11, 1, 4, 3, -28, -28, -13, -30, -21, 6, -22, -12, -21, -16, 1, -8, -29, -21, 5, 9, -13, -19, -29, -2, -10, -19, -20, -23, -2, -4, -15, -5, -12, -1, -24, -24, -12, -17, -10, -5, -23, 7, -29, -4, -7, -19, -16, -32, -12, -24, -13, -9, -22, -17, -9, -20, -31, -21, -2, -9, -1, 0, -5, 10, -32, -24, -13, -7, 5, 7, -7, 8, -16, -31, -19, -31, 4 },
                new int[] { 8, 0, -24, -32, -13, -15, -7, -4, -2, -19, -6, -2, -27, -31, -9, 7, -2, 10, 3, -16, -2, -18, -16, -28, -4, -24, -13, -4, 8, -9, 3, 8, -32, -24, -31, -9, 1, -22, -14, -18, 9, -10, -11, -15, -29, -3, -3, -1, -30, -24, -13, -6, -7, 5, 4, -20, 6, -22, 1, 4, 6, -10, 6, -14, -17, -32, -2, -26, -14, -25, -11, 6, 10, -14, -3, -23, -27, -4, -16, -26, 3, 7, -20, -14, 5, -31, -28, -19, 3, 5, -31, -2, 5, -11, -14, -7, 9, 6, -13, 3 },
                new int[] { -22, -7, -24, -1, 6, 0, 5, -30, 1, -30, 5, -3, -11, 3, 10, 6, -30, -10, -7, 7, -31, 10, 4, 8, 0, -14, -5, -6, -15, -25, -29, 9, 7, -12, -3, -26, -3, -4, 6, 3, -13, -31, -20, -2, 6, -6, -16, -5, -23, -14, 0, 8, 0, 2, -24, 10, -17, -5, -20, -29, 10, -27, -1, -19, -10, -15, -3, -15, -32, -4, 4, -25, -3, -1, -6, -23, -4, -13, -8, -9, -31, -9, -10, -20, 10, -7, -31, -30, -16, -21, -16, 3, -22, -10, 9, -1, -16, -9, -6, -9 }
                );
        }
    }
}
